image: python:3.11-slim

variables:
  PYTHONPATH: "${CI_PROJECT_DIR}/dags:${CI_PROJECT_DIR}/plugins:./airflow/dags:./airflow/plugins"
  MYPYPATH: "airflow_lappis/plugins:airflow_lappis/helpers:airflow_lappis/dags"
  POETRY_HOME: "/opt/poetry"
  POETRY_VERSION: "1.8.5"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  POETRY_CACHE_DIR: "/tmp/poetry-cache"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DBT_PROJECT_DIR: "${CI_PROJECT_DIR}/plugins/dbt"
  GIT_CI_USER: "ci bot"
  GIT_CI_EMAIL: "ci.lappis.rocks@gmail.com"
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_TAG: "$CI_REGISTRY_IMAGE/airflow-ipea:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"

cache:
  paths:
    # - .cache/poetry
    - .cache/pip
    - .venv
    - .cache/docker

stages:
  - lint
  - test
  - build

.install-poetry:
  before_script:
    - apt-get update
    - apt-get -y install make
    - pip install poetry==${POETRY_VERSION}
    - poetry install --no-root --with dev
    - source $(poetry env info --path)/bin/activate

lint:
  stage: lint
  extends: .install-poetry
  script:
    - make lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test:
  stage: test
  extends: .install-poetry
  script:
    - poetry run pytest tests --junitxml=report.xml
  coverage: '/TOTAL.*?(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

scan:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORG -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.exclusions=**/.cache/poetry/**/*,**/.venv/**/*,**/.cache/pip/**/*
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - changes:
      - dags/**
      - plugins/**
      - src/**
      - tests/**

docker-build-and-push:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - changes:
      - Dockerfile
      - requirements.txt
      - pyproject.toml
